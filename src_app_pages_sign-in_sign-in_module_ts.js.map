{"version":3,"file":"src_app_pages_sign-in_sign-in_module_ts.js","mappings":"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","sources":["./src/app/pages/sign-in/sign-in.component.ts","./src/app/pages/sign-in/sign-in.component.html","./src/app/pages/sign-in/sign-in.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { emailValidator, matchingPasswords } from '../../theme/utils/app-validators';\r\nimport { DataService } from 'src/app/data.service';\r\n\r\n@Component({\r\n  selector: 'app-sign-in',\r\n  templateUrl: './sign-in.component.html',\r\n  styleUrls: ['./sign-in.component.scss']\r\n})\r\nexport class SignInComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  registerForm: FormGroup;\r\n  hide = true;\r\n  signInData:any;\r\n  constructor(public formBuilder: FormBuilder, public router:Router, public snackBar: MatSnackBar,private dataServe:DataService) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      'email': ['', Validators.compose([Validators.required, emailValidator])],\r\n      'password': ['', Validators.compose([Validators.required, Validators.minLength(3)])] \r\n    });\r\n\r\n    this.registerForm = this.formBuilder.group({\r\n      'name': ['', Validators.compose([Validators.required, Validators.minLength(6)])],\r\n      'email': ['', Validators.compose([Validators.required, emailValidator])],\r\n      'phone':['',Validators.required],\r\n      'password': ['', Validators.required],\r\n      'confirmPassword': ['', Validators.required]\r\n    },{validator: matchingPasswords('password', 'confirmPassword')});\r\n\r\n  }\r\n\r\n  public onLoginFormSubmit(values:Object):void {\r\n    if (this.loginForm.valid) {\r\n     this.dataServe.signIn(values).subscribe(data=>{\r\n       console.log(data)\r\n       this.signInData=data\r\n       if(this.signInData.suc==1)\r\n       {\r\n         var dt={\r\n           email:this.loginForm.controls.email.value,\r\n           loggedIn:true,\r\n           userId:this.signInData.msg[0].userId,\r\n           name:this.signInData.msg[0].name,\r\n           address:this.signInData.msg[0].address,\r\n           country_id:this.signInData.msg[0].country_id,\r\n           state:this.signInData.msg[0].state,\r\n           city:this.signInData.msg[0].city,\r\n           zip_code:this.signInData.msg[0].zip_code,\r\n           phone_no:this.signInData.msg[0].phone_no\r\n       }\r\n        this.dataServe.putUserData(dt)\r\n        this.router.navigate(['/']);\r\n        this.dataServe.showLogOutButton.next(true)\r\n       \r\n       \r\n      }\r\n      else{\r\n      this.snackBar.open(this.signInData.msg, '×', { panelClass: 'error', verticalPosition: 'top', duration: 3000 });\r\n\r\n      }\r\n    },error=>{\r\n      this.snackBar.open(this.signInData.msg, '×', { panelClass: 'error', verticalPosition: 'top', duration: 3000 });\r\n\r\n    })\r\n    }\r\n  }\r\n\r\n  public onRegisterFormSubmit(values:Object):void {\r\n    if (this.registerForm.valid) {\r\n      var dt={\r\n        name:this.registerForm.controls.name.value,\r\n        email:this.registerForm.controls.email.value,\r\n        phone:this.registerForm.controls.phone.value,\r\n        password:this.registerForm.controls.password.value,\r\n     }\r\n     this.dataServe.signUp(dt).subscribe(data=>{\r\n       this.signInData=data;\r\n       if(this.signInData.suc==1){\r\n        this.snackBar.open('You registered successfully!', '×', { panelClass: 'success', verticalPosition: 'top', duration: 3000 });\r\n        this.registerForm.reset()\r\n       }\r\n     })\r\n    }\r\n  }\r\n\r\n}\r\n","<mat-card>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxFlex.gt-sm=\"50\" class=\"p-2\">\r\n            <h2 class=\"text-muted text-center\">Sign In</h2>\r\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLoginFormSubmit(loginForm.value)\">\r\n                <mat-form-field appearance=\"outline\" class=\"w-100 mt-2\">\r\n                    <mat-label>Email</mat-label>\r\n                    <input matInput placeholder=\"Email\" formControlName=\"email\" required>\r\n                    <mat-error *ngIf=\"loginForm.controls.email.errors?.required\">Email is required</mat-error>\r\n                    <mat-error *ngIf=\"loginForm.controls.email.hasError('invalidEmail')\">Invalid email address</mat-error>\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field appearance=\"outline\" class=\"w-100 mt-1\">\r\n                    <mat-label>Password</mat-label>\r\n                    <input matInput [type]=\"hide ? 'password' : 'text'\" placeholder=\"Password\" formControlName=\"password\" required>\r\n                    <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\r\n                        <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                      </button>\r\n                    <mat-error *ngIf=\"loginForm.controls.password.errors?.required\">Password is required</mat-error>\r\n                    <mat-error *ngIf=\"loginForm.controls.password.hasError('minlength')\">Password isn't long enough, minimum of 3 characters</mat-error>\r\n                </mat-form-field> \r\n                <div class=\"text-center mt-2\">\r\n                    <button mat-fab color=\"primary\" class=\"mat-elevation-z6\" type=\"submit\">\r\n                        <mat-icon>exit_to_app</mat-icon>\r\n                    </button>\r\n                </div> \r\n\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" class=\"mt-3\">\r\n                    <div class=\"divider w-100\"></div>\r\n                    <h3 class=\"text-muted auth\">or Sign in with one click</h3>\r\n                    <div class=\"divider w-100\"></div>\r\n                </div>               \r\n                \r\n                <div class=\"text-center py-2\">                   \r\n                    <svg class=\"social-icon\" viewBox=\"0 0 24 24\" matTooltip=\"Facebook\">\r\n                        <path d=\"M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M18,5H15.5A3.5,3.5 0 0,0 12,8.5V11H10V14H12V21H15V14H18V11H15V9A1,1 0 0,1 16,8H18V5Z\" />\r\n                    </svg>\r\n                    <svg class=\"social-icon\" viewBox=\"0 0 24 24\" matTooltip=\"Twitter\">\r\n                        <path d=\"M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M17.71,9.33C18.19,8.93 18.75,8.45 19,7.92C18.59,8.13 18.1,8.26 17.56,8.33C18.06,7.97 18.47,7.5 18.68,6.86C18.16,7.14 17.63,7.38 16.97,7.5C15.42,5.63 11.71,7.15 12.37,9.95C9.76,9.79 8.17,8.61 6.85,7.16C6.1,8.38 6.75,10.23 7.64,10.74C7.18,10.71 6.83,10.57 6.5,10.41C6.54,11.95 7.39,12.69 8.58,13.09C8.22,13.16 7.82,13.18 7.44,13.12C7.81,14.19 8.58,14.86 9.9,15C9,15.76 7.34,16.29 6,16.08C7.15,16.81 8.46,17.39 10.28,17.31C14.69,17.11 17.64,13.95 17.71,9.33Z\" />\r\n                    </svg>\r\n                    <svg class=\"social-icon\" viewBox=\"0 0 24 24\" matTooltip=\"Google\">\r\n                        <path d=\"M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M19.5,12H18V10.5H17V12H15.5V13H17V14.5H18V13H19.5V12M9.65,11.36V12.9H12.22C12.09,13.54 11.45,14.83 9.65,14.83C8.11,14.83 6.89,13.54 6.89,12C6.89,10.46 8.11,9.17 9.65,9.17C10.55,9.17 11.13,9.56 11.45,9.88L12.67,8.72C11.9,7.95 10.87,7.5 9.65,7.5C7.14,7.5 5.15,9.5 5.15,12C5.15,14.5 7.14,16.5 9.65,16.5C12.22,16.5 13.96,14.7 13.96,12.13C13.96,11.81 13.96,11.61 13.89,11.36H9.65Z\" />\r\n                    </svg>\r\n                </div> \r\n\r\n            </form>\r\n        </div>\r\n        <div fxFlex=\"100\" fxFlex.gt-sm=\"50\" class=\"p-2\" ngClass.sm=\"mt-2\" ngClass.xs=\"mt-2\">\r\n            <h2 class=\"text-muted text-center\">Don't have an account? Sign up now!</h2>\r\n            <form [formGroup]=\"registerForm\" (ngSubmit)=\"onRegisterFormSubmit(registerForm.value)\">\r\n                <mat-form-field  appearance=\"outline\" class=\"w-100 mt-2\">\r\n                    <mat-label>Full Name</mat-label>\r\n                    <input matInput placeholder=\"Full Name\" formControlName=\"name\" required>\r\n                    <mat-error *ngIf=\"registerForm.controls.name.errors?.required\">Full Name is required</mat-error>\r\n                    <mat-error *ngIf=\"registerForm.controls.name.hasError('minlength')\">Full Name isn't long enough, minimum of 3 characters</mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field  appearance=\"outline\" class=\"w-100 mt-1\">\r\n                    <mat-label>Email</mat-label>\r\n                    <input matInput placeholder=\"Email\" formControlName=\"email\" required>\r\n                    <mat-error *ngIf=\"registerForm.controls.email.errors?.required\">Email is required</mat-error>\r\n                    <mat-error *ngIf=\"registerForm.controls.email.hasError('invalidEmail')\">Invalid email address</mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field appearance=\"outline\" class=\"w-100\">\r\n                    <mat-label>Phone</mat-label>\r\n                    <input matInput placeholder=\"Phone\" formControlName=\"phone\" required>\r\n                    <mat-error *ngIf=\"registerForm.controls.phone.errors?.required\">Phone is required</mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field  appearance=\"outline\" class=\"w-100 mt-1\">\r\n                    <mat-label>Password</mat-label>\r\n                    <input matInput placeholder=\"Password\" formControlName=\"password\" type=\"password\" minlength=\"6\" required>\r\n                    <mat-error *ngIf=\"registerForm.controls.password.errors?.required\">Password is required</mat-error>\r\n                    <mat-error *ngIf=\"registerForm.controls.password.hasError('minlength')\">Password isn't long enough, minimum of 6 characters</mat-error>\r\n                </mat-form-field> \r\n                <mat-form-field  appearance=\"outline\" class=\"w-100 mt-1\">\r\n                    <mat-label>Confirm Password</mat-label>\r\n                    <input matInput placeholder=\"Confirm Password\" formControlName=\"confirmPassword\" type=\"password\" required>\r\n                    <mat-error *ngIf=\"registerForm.controls.confirmPassword.errors?.required\">Confirm Password is required</mat-error>\r\n                    <mat-error *ngIf=\"registerForm.controls.confirmPassword.hasError('mismatchedPasswords')\">Passwords do not match</mat-error>\r\n                </mat-form-field>\r\n                <div class=\"text-center mt-2\">\r\n                    <button mat-fab color=\"primary\" class=\"mat-elevation-z6\" type=\"submit\">\r\n                        <mat-icon>person_add</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div> \r\n</mat-card>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { SignInComponent } from './sign-in.component';\nimport { LogoutDialogComponent } from './logout-dialog/logout-dialog.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: SignInComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    SignInComponent,\r\n    LogoutDialogComponent\r\n  ]\r\n})\r\nexport class SignInModule { }\r\n"],"names":[],"sourceRoot":"webpack:///"}